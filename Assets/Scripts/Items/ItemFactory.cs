//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace AssemblyCSharp
{
	public class ItemFactory
	{
		//<item_name, item>
		public Dictionary<string, Item> itemDatabase;

		//<item_name, prefab_path
		public Dictionary<string, GameObject> itemPrefabDatabase;

		public ItemFactory ()
		{
			itemDatabase = new Dictionary<string, Item>();
			itemPrefabDatabase = new Dictionary<string, GameObject> ();
			
			itemDatabase.Add ("Drow Sword", new Weapon (1, 2, (Texture2D)Resources.Load ("Sprites/Weapons/DrowSword"), "Drow Sword",10,1f));
			itemPrefabDatabase.Add ("Drow Sword", ((GameObject) Resources .Load("Prefabs/Weapons/Drow Sword")));
			
			itemDatabase.Add ("Shaman Staff", new Weapon (2, 4, (Texture2D)Resources.Load ("Sprites/Weapons/Shaman Staff"), "Shaman Staff",15,1f));
			itemPrefabDatabase.Add ("Shaman Staff", ((GameObject) Resources .Load("Prefabs/Weapons/Shaman Staff")));
			
			itemDatabase.Add ("Cloth Armor", new Armor (2, 3, (Texture2D)Resources.Load ("Sprites/Armor/Cloth Armor"), "Cloth Armor",10,Armor.ArmorType.Chest));
			itemPrefabDatabase.Add ("Cloth Armor", ((GameObject) Resources .Load("Prefabs/Armor/Cloth Armor")));
			
			itemDatabase.Add ("Health Potion", new Potion (1, 1, (Texture2D)Resources.Load ("Sprites/Potions/HealthPotion"), "Health Potion", Potion.PotionType.Healing));
			itemPrefabDatabase.Add ("Health Potion", ((GameObject) Resources .Load("Prefabs/Potions/Potion")));
			
			itemDatabase.Add ("Mana Potion", new Potion (1, 1, (Texture2D)Resources.Load ("Sprites/Potions/ManaPotion"), "Mana Potion", Potion.PotionType.Mana));
			itemPrefabDatabase.Add ("Mana Potion", ((GameObject) Resources .Load("Prefabs/Potions/Potion")));
			
			itemDatabase.Add ("Potion", new Potion (1, 1, (Texture2D)Resources.Load ("Sprites/Potions/Potion"), "Potion", Potion.PotionType.Buff));
			itemPrefabDatabase.Add ("Potion", ((GameObject) Resources .Load("Prefabs/Potions/Potion")));
			
			itemDatabase.Add ("Scroll of FlameArrow", new Scroll(new FlameArrow()));
			itemPrefabDatabase.Add ("Scroll of FlameArrow", ((GameObject) Resources .Load("Prefabs/Scrolls/Scroll")));
			
			itemDatabase.Add ("Compound Bow", new Weapon (2, 3, (Texture2D)Resources.Load ("Sprites/Weapons/CompoundBow"), "Compound Bow",15,1f));
			itemPrefabDatabase.Add ("Compound Bow", ((GameObject) Resources .Load("Prefabs/Weapons/CompoundBow")));


			//JUST THE ARROW
			itemPrefabDatabase.Add ("Arrow", ((GameObject) Resources .Load("Prefabs/Weapons/Arrow")));



//			Debug.Log ("Weapon indexed: " + itemDatabase ["Drow Sword"]);
		}

		//this is when we create a randomized weapon property bundle
		//otherwise, we're just copying the already instantiated item/bundle object attached to the gameobject
		public Item GenerateNewRandomItem(string baseItemName, int itemLevel){
//			Debug.Log (baseItemName);
			Item item = copyItem(itemDatabase [baseItemName]);
			//Debug.Log (item.name);
			Item.ItemPropertyBundle.Rarity randomRarity  = Item.ItemPropertyBundle.Rarity.Common;

			int random = UnityEngine.Random.Range (0, 100);
			if (random >= 50 && random < 90) {
				randomRarity = Item.ItemPropertyBundle.Rarity.Magic;
			}
			if (random >= 90) {
				randomRarity = Item.ItemPropertyBundle.Rarity.Rare;
			}

			//DIFFERENT ITEM TYPES
			if(item is Weapon){
				item.propertyBundle = new Weapon.WeaponPropertyBundle (randomRarity, itemLevel);
			}
			if(item is Armor){
				item.propertyBundle = new Armor.ArmorPropertyBundle (randomRarity, itemLevel, ((Armor) item).armorType);
			}
			if(item is Potion){
				item.propertyBundle = new Potion.PotionPropertyBundle (itemLevel, ((Potion) item).potionType);
			}
			if(item is Scroll){
				//do nothing
			}

			return item;
		}

		public GameObject InstantiateItemFromPrefab(string baseItemName, Transform transform, int itemLevel){
			Vector3 position = new Vector3 (transform.position.x + UnityEngine.Random.Range (0, 1.5f),
			                               transform.position.y + UnityEngine.Random.Range (0, 1.5f),
			                               transform.position.z + UnityEngine.Random.Range (0, 1.5f));
			GameObject clone = (GameObject) MonoBehaviour.Instantiate(itemPrefabDatabase[baseItemName],position,transform.rotation);
			PickUpItem pickupClone = clone.GetComponentInChildren<PickUpItem>();
			Rigidbody cloneRigidBody  = clone.GetComponentInChildren<Rigidbody>();
			cloneRigidBody.velocity = new Vector3(0,7.5f,0);
			cloneRigidBody.angularVelocity = new Vector3(UnityEngine.Random.Range(-16,16),UnityEngine.Random.Range(-16,16),UnityEngine.Random.Range(-16,16));
			pickupClone.item = GenerateNewRandomItem (baseItemName, itemLevel);
			return clone;
		}

		//the name of the item must be the name of the prefab!
		public GameObject InstantiateItemFromInventory(Transform transform, Item item){
			float dropDistance = 0.1f;
			string baseItemName = item.name;
			transform.position = transform.position + new Vector3(transform.forward.x*dropDistance,transform.forward.x*dropDistance,transform.forward.z*dropDistance);
			GameObject clone = (GameObject) MonoBehaviour.Instantiate(itemPrefabDatabase[baseItemName],transform.position,transform.rotation);
			PickUpItem pickupClone = clone.GetComponentInChildren<PickUpItem>();
			Rigidbody cloneRigidBody  = clone.GetComponentInChildren<Rigidbody>();
			cloneRigidBody.velocity = new Vector3(0,3.5f,0);
			cloneRigidBody.angularVelocity = new Vector3(UnityEngine.Random.Range(-6,6),UnityEngine.Random.Range(-6,6),UnityEngine.Random.Range(-6,6));
			pickupClone.item = item;

			return clone;
		}

		public Item copyItem(Item item){
			//TODO: instantiate other item types!
			if (item is Weapon) {
				Item copy = new Weapon (item.width, item.height, item.image, item.name, ((Weapon)item).baseDamage, ((Weapon)item).baseAttackSpeed);
				return copy;
			}
			if (item is Armor) {
				Item copy = new Armor (item.width, item.height, item.image, item.name, ((Armor)item).baseArmor, ((Armor)item).armorType);
				return copy;
			}
			if (item is Potion) {
				Item copy = new Potion (item.width, item.height, item.image, item.name, ((Potion)item).potionType);
				return copy;
			}
			if (item is Scroll) {
				Item copy = new Scroll (((Scroll)item).spell);
				return copy;
			}
			return null;
		}

		public GameObject InstantiateProjectile(string prefabName, Transform transform, float speed){
			Vector3 position = transform.position + transform.forward*0.5f;
			GameObject clone = (GameObject) MonoBehaviour.Instantiate(itemPrefabDatabase[prefabName],position,transform.rotation);
			Rigidbody cloneRigidBody  = clone.GetComponentInChildren<Rigidbody>();
			cloneRigidBody.velocity = transform.forward * speed;
			return clone;
		}

	}

}

